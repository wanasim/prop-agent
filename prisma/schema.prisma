generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   String
  owner     User     @relation("PropertyOwner", fields: [ownerId], references: [id])
  tenants   User[]   @relation("PropertyTenants")

  @@index([name])
  @@index([ownerId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  image            String?
  userType         UserType?
  accounts         Account[]
  ownedProperties  Property[] @relation("PropertyOwner", onDelete: Cascade)
  sessions         Session[]
  rentedProperties Property[] @relation("PropertyTenants", onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserType {
  TENANT
  OWNER
}
